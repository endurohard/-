require('dotenv').config(); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('../db/initDatabase'); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const https = require ('https');
const axios = require ('axios');
const TelegramBot = require('node-telegram-bot-api');
const { Pool } = require('pg'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Pool
const initializeDatabase = require('../db/initDatabase'); // –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Å–∫—Ä–∏–ø—Ç—É


const db = new Pool({ // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Pool
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT,
});

(async () => {
    await initializeDatabase();
    console.log('[Bot] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.');
})();

// HTTPS –∞–≥–µ–Ω—Ç –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
const httpsAgent = new https.Agent({ rejectUnauthorized: false });

const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });
console.log("[Bot] Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.");

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id;
        console.log(`[Bot] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${chatId}`);

        await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RaphaelVPN Bot! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            reply_markup: {
                keyboard: [
                    [{ text: '–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }],
                    [{ text: '–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤' }],
                    [{ text: '–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á' }],
                    [{ text: '–®–∞–±–ª–æ–Ω—ã –æ–ø–ª–∞—Ç—ã' }]
                ],
                resize_keyboard: true, // –ü–æ–¥–≥–æ–Ω—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —ç–∫—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                one_time_keyboard: false // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
            }
        });
        console.log('[Bot] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
    });

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const userState = userStates[chatId];

    console.log(`[Bot] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${msg.text}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`);

    try {
        if (msg.text === '–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á') {
            console.log(`[Bot] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${msg.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞.`);
            await showServerSelection(bot, chatId);
        }
        if (msg.text === '–®–∞–±–ª–æ–Ω—ã –æ–ø–ª–∞—Ç—ã') {
            console.log(`[Bot] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${msg.from.id} –∑–∞–ø—Ä–æ—Å–∏–ª —à–∞–±–ª–æ–Ω—ã –æ–ø–ª–∞—Ç—ã.`);

            const options = {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω', callback_data: 'add_payment_template' }],
                        [{ text: '–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤', callback_data: 'list_payment_templates' }]
                    ]
                }
            };

            await bot.sendMessage(chatId, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –æ–ø–ª–∞—Ç—ã:', options);
        }
        if (msg.text === '–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤') {
            console.log(`[Bot] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤.`);
            await handleServerList(bot, chatId);
            return;
        }

        if (msg.text === '–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä') {
            console.log(`[Bot] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞.`);
            userStates[chatId] = { step: 1 };
            await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ Display Name —Å–µ—Ä–≤–µ—Ä–∞:');
            return;
        }

        if (userState) {
            console.log(`[Bot] –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(userState)}`);

            if (userState.step === 'awaiting_bank_name') {
                userStates[chatId] = { step: 'awaiting_payment_method', bank_name: msg.text };
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–ë–ü –∏–ª–∏ –ü–µ—Ä–µ–≤–æ–¥):');
            } else if (userState.step === 'awaiting_payment_method') {
                userStates[chatId] = { step: 'awaiting_details', bank_name: userState.bank_name, payment_method: msg.text };
                await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω):');
            } else if (userState.step === 'awaiting_details') {
                const { bank_name, payment_method } = userState;
                const details = msg.text;

                try {
                    await db.query(
                        'INSERT INTO payment_templates (bank_name, payment_method, details) VALUES ($1, $2, $3)',
                        [bank_name, payment_method, details]
                    );
                    await bot.sendMessage(chatId, `–®–∞–±–ª–æ–Ω –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n–ë–∞–Ω–∫: ${bank_name}\n–°–ø–æ—Å–æ–±: ${payment_method}\n–î–µ—Ç–∞–ª–∏: ${details}`);
                    console.log(`[Database] –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –æ–ø–ª–∞—Ç—ã: ${bank_name}, ${payment_method}, ${details}`);
                } catch (error) {
                    console.error('[Database] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ–ø–ª–∞—Ç—ã:', error);
                    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }

                delete userStates[chatId]; // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
            return;
        }

        console.log(`[Bot] –°–æ–æ–±—â–µ–Ω–∏–µ "${msg.text}" –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.`);
    } catch (error) {
        console.error('[Bot] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});
async function getPaymentTemplates() {
    try {
        const result = await db.query('SELECT * FROM payment_templates');
        return result.rows;
    } catch (error) {
        console.error('[Database] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤ –æ–ø–ª–∞—Ç—ã:', error);
        return [];
    }
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    const chatId = callbackQuery.message.chat.id;
    console.log(`[Bot] –ü–æ–ª—É—á–µ–Ω–∞ callback_query: ${data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${chatId}`);

    if (data === 'add_payment_template') {
        userStates[chatId] = { step: 'awaiting_bank_name' };
        await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:');
    }

    if (data === 'list_payment_templates') {
        const templates = await getPaymentTemplates();

        if (templates.length === 0) {
            await bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ–ø–ª–∞—Ç—ã.');
            return;
        }

        const buttons = templates.map(template => [
            { text: `${template.bank_name} - ${template.payment_method}`, callback_data: `view_template_${template.id}` },
            { text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_template_${template.id}` }
        ]);

        await bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –æ–ø–ª–∞—Ç—ã:', {
            reply_markup: {
                inline_keyboard: buttons
            }
        });
    }

    if (data.startsWith('view_template_')) {
        const templateId = data.split('view_template_')[1];

        try {
            const result = await db.query('SELECT * FROM payment_templates WHERE id = $1', [templateId]);
            const template = result.rows[0];

            if (template) {
                await bot.sendMessage(
                    chatId,
                    `–®–∞–±–ª–æ–Ω –æ–ø–ª–∞—Ç—ã:\n\nüè¶ –ë–∞–Ω–∫: ${template.bank_name}\nüí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${template.payment_method}\nüìÑ –î–µ—Ç–∞–ª–∏: ${template.details}`
                );
            } else {
                await bot.sendMessage(chatId, '–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }
        } catch (error) {
            console.error('[Database] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –æ–ø–ª–∞—Ç—ã:', error);
            await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    if (data.startsWith('delete_template_')) {
        const templateId = data.split('delete_template_')[1];

        try {
            await db.query('DELETE FROM payment_templates WHERE id = $1', [templateId]);
            await bot.sendMessage(chatId, '–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
        } catch (error) {
            console.error('[Database] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ –æ–ø–ª–∞—Ç—ã:', error);
            await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    if (data.startsWith('delete_server_')) {
        const serverId = data.split('delete_server_')[1];

        try {
            console.log(`[Database] –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ —Å ID: ${serverId}`);
            await db.query('DELETE FROM servers WHERE id = $1', [serverId]);
            bot.sendMessage(chatId, '–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
            console.log(`[Database] –°–µ—Ä–≤–µ—Ä —Å ID ${serverId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
        } catch (err) {
            console.error('[Database] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞:', err);
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    if (data.startsWith('create_key_')) {
        const serverId = data.split('create_key_')[1];
        const servers = await getServersFromDatabase();
        const selectedServer = servers.find(server => server.id.toString() === serverId);

        if (!selectedServer) {
            await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            return;
        }

        console.log(`[Callback] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–µ—Ä–≤–µ—Ä: ${selectedServer.name}`);
        await createKey(bot, chatId, selectedServer);
    }

    if (data.startsWith('info_server_')) {
        const serverId = data.split('info_server_')[1];

        try {
            console.log(`[Database] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ —Å ID: ${serverId}`);
            const result = await dbClient.query('SELECT * FROM servers WHERE id = $1', [serverId]);
            const server = result.rows[0];

            if (server) {
                bot.sendMessage(chatId, `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:\n\nüìõ Display Name: ${server.display_name}\nüñ•Ô∏è Name: ${server.name}\nüîó API URL: ${server.api_url}`);
                console.log(`[Bot] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ ID ${serverId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`);
            } else {
                bot.sendMessage(chatId, '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                console.log(`[Database] –°–µ—Ä–≤–µ—Ä —Å ID ${serverId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            }
        } catch (err) {
            console.error('[Database] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ:', err);
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª—é—á–∞
async function createKey(bot, chatId, server) {
    try {
        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const response = await axios.post(`${server.api_url}/access-keys`, {}, {
            httpsAgent,
        });

        const { id, accessUrl } = response.data;

        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ accessUrl
        const url = new URL(accessUrl);
        const userInfo = url.username; // –î–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
        const hostname = `${server.name}.bestvpn.world`; // –ö–∞—Å—Ç–æ–º–Ω–æ–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
        const port = url.port;
        const queryParams = url.search; // outline=1

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
        const customAccessUrl = `ss://${userInfo}@${hostname}:${port}/${queryParams}#RaphaelVPN`;

        console.log(`[Key] –ö–ª—é—á —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${server.name}. Custom URL: ${customAccessUrl}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(chatId, `–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${server.display_name}:\n<code>${customAccessUrl}</code>`, { parse_mode: 'HTML' });
    } catch (error) {
        console.error('[Key] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞:', error.message);
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function getServersFromDatabase() {
    try {
        const result = await db.query('SELECT id, name, display_name, api_url FROM servers');
        console.log('[Database] –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:', result.rows);
        return result.rows;
    } catch (error) {
        console.error('[Database] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerAvailability(server) {
    try {
        const response = await axios.get(`${server.api_url}/server/metrics/transfer`, {
            timeout: 5000,
            httpsAgent,
        });
        console.log(`[Monitor] –°–µ—Ä–≤–µ—Ä ${server.name} –¥–æ—Å—Ç—É–ø–µ–Ω. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
        return true; // –°—á–∏—Ç–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø—Ä–∏ –ª—é–±–æ–º –∫–æ–¥–µ –æ—Ç–≤–µ—Ç–∞
    } catch (error) {
        if (error.response) {
            console.log(`[Monitor] –°–µ—Ä–≤–µ—Ä ${server.name} –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º: ${error.response.status}, –Ω–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º.`);
            return true; // –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –ª—é–±–æ–º –æ—Ç–≤–µ—Ç–µ
        }

        console.warn(`[Monitor] –°–µ—Ä–≤–µ—Ä ${server.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
        return false; // –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞
    }
}


// –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
async function getAvailableServers() {
    const servers = await getServersFromDatabase();
    const availableServers = [];

    for (const server of servers) {
        if (await checkServerAvailability(server)) {
            availableServers.push(server);
        }
    }

    console.log('[Monitor] –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:', availableServers);
    return availableServers;
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function showServerSelection(bot, chatId) {
    try {
        const servers = await getAvailableServers();

        if (servers.length === 0) {
            await bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞.');
            return;
        }

        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ display_name
        const buttons = servers.map(server => [
            { text: server.display_name, callback_data: `create_key_${server.id}` }
        ]);

        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞:', {
            reply_markup: { inline_keyboard: buttons }
        });
    } catch (error) {
        console.error('[Bot] –û—à–∏–±–∫–∞ –≤ showServerSelection:', error);
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function handleServerList(bot, chatId) {
    console.log(`[Bot] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID ${chatId} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤.`);

    try {
        const result = await db.query('SELECT id, display_name, name FROM servers');
        const servers = result.rows;

        console.log('[Database] –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:', servers);

        if (servers.length === 0) {
            await bot.sendMessage(chatId, '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.');
            console.log('[Bot] –°–æ–æ–±—â–µ–Ω–∏–µ: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
            return;
        }

        const buttons = servers.map(server => [
            { text: server.display_name, callback_data: `view_server_${server.id}` },
            { text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_server_${server.id}` }
        ]);

        await bot.sendMessage(chatId, '–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:', {
            reply_markup: {
                inline_keyboard: buttons
            }
        });
        console.log('[Bot] –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
    } catch (error) {
        console.error('[Database] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
        await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}